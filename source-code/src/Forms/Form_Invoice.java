/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import Repositories.InvoiceRepository;
import java.awt.Desktop;
import java.awt.Frame;
import java.io.FileOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.io.File;
import java.io.IOException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author ThanhNhan
 */
public class Form_Invoice extends javax.swing.JPanel implements Form_Invoice_AddItem.DataChangedListener, Form_Invoice_UpdateItem.DataChangedListener {
    private InvoiceRepository invoiceRepo = new InvoiceRepository();
    /**
     * Creates new form Form_Invoice
     */
    public Form_Invoice() {
        initComponents();
        loadInvoiceToTable();
    }

    public void onDataChanged() {
        loadInvoiceToTable();
    }
    
    public void loadInvoiceToTable() {
        DefaultTableModel model = (DefaultTableModel) tableInvoices.getModel();
        model.setRowCount(0);
        
        List<Models.Invoice> invoices = invoiceRepo.getAllInvoices();

        for (Models.Invoice c : invoices) {
            model.addRow(new Object[]{
                c.getInvoiceID(), 
                c.getCreateDate(), 
                c.getPaymentMethod(),
                c.getTotal(),
                c.getEmployeeID()
            });
        }
    }
    
    private java.sql.Date convertStringToDate(String dateString) {
        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd"); 
        try {
            java.util.Date parsed = format.parse(dateString);
            return new java.sql.Date(parsed.getTime()); 
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ. Vui lòng nhập theo yyyy-MM-dd.");
            return null;
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFunction = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnInfo = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        btnExcel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableInvoices = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        panelFunction.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chức năng", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 16))); // NOI18N
        panelFunction.setLayout(new javax.swing.BoxLayout(panelFunction, javax.swing.BoxLayout.X_AXIS));

        jToolBar1.setRollover(true);

        btnAdd.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/plus.png"))); // NOI18N
        btnAdd.setText("Thêm");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAdd.setMargin(new java.awt.Insets(5, 20, 5, 20));
        btnAdd.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        jToolBar1.add(btnAdd);

        btnDelete.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/minus.png"))); // NOI18N
        btnDelete.setText("Xóa");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setMargin(new java.awt.Insets(5, 20, 5, 20));
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnDelete);

        btnEdit.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/edit.png"))); // NOI18N
        btnEdit.setText("Sửa");
        btnEdit.setFocusable(false);
        btnEdit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEdit.setMargin(new java.awt.Insets(5, 20, 5, 20));
        btnEdit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        jToolBar1.add(btnEdit);

        btnInfo.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/info.png"))); // NOI18N
        btnInfo.setText("Chi tiết");
        btnInfo.setFocusable(false);
        btnInfo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnInfo.setMargin(new java.awt.Insets(5, 20, 5, 20));
        btnInfo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInfoActionPerformed(evt);
            }
        });
        jToolBar1.add(btnInfo);

        panelFunction.add(jToolBar1);

        jToolBar2.setRollover(true);

        btnExcel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btnExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/sheets.png"))); // NOI18N
        btnExcel.setText("Xuất file Excel");
        btnExcel.setFocusable(false);
        btnExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExcel.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcelActionPerformed(evt);
            }
        });
        jToolBar2.add(btnExcel);

        panelFunction.add(jToolBar2);

        add(panelFunction);

        tableInvoices.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tableInvoices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã hóa đơn", "Ngày lập hóa đơn", "PTTT", "Thành tiền", "Mã nhân viên lập HD"
            }
        ));
        jScrollPane2.setViewportView(tableInvoices);

        add(jScrollPane2);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        Form_Invoice_AddItem dialog = new Form_Invoice_AddItem((Frame)SwingUtilities.getWindowAncestor(this), true);
        dialog.setLocationRelativeTo(this);
        dialog.setDataChangedListener(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableInvoices.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xóa.");
            return;
        }

        String invoiceIDToDelete = (String) tableInvoices.getValueAt(selectedRow, 0);

        int confirmResult = JOptionPane.showConfirmDialog(this,
            "Bạn có chắc chắn muốn xóa hóa đơn có mã hóa đơn: " + invoiceIDToDelete.trim() + "?",
            "Xác nhận xóa",
            JOptionPane.YES_NO_OPTION);

        if (confirmResult == JOptionPane.YES_OPTION) {
            if (invoiceRepo.deleteInvoice(invoiceIDToDelete)) {
                JOptionPane.showMessageDialog(this, "Xóa hóa đơn thành công!");
                loadInvoiceToTable();
            } else {
                JOptionPane.showMessageDialog(this, "Xóa hóa đơn thất bại.");
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableInvoices.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để sửa.");
            return;
        }

        String invoiceID = (String) tableInvoices.getValueAt(selectedRow, 0);
        java.util.Date dateCreate = (java.util.Date) tableInvoices.getValueAt(selectedRow, 1);
        String methodPayment = (String) tableInvoices.getValueAt(selectedRow, 2);
        int total = (Integer) tableInvoices.getValueAt(selectedRow, 3);
        String employeeID = (String) tableInvoices.getValueAt(selectedRow, 4);

        Form_Invoice_UpdateItem updateItemDialog = new Form_Invoice_UpdateItem((java.awt.Frame) SwingUtilities.getWindowAncestor(this), true);
        updateItemDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        updateItemDialog.setLocationRelativeTo(this);
        updateItemDialog.setModal(true);

        // Điền dữ liệu vào các text field trên dialog
        updateItemDialog.setInvoiceID(invoiceID);
        updateItemDialog.setDateCreate(new SimpleDateFormat("yyyy-MM-dd").format(dateCreate));
        updateItemDialog.setMethodPayment(methodPayment);
        updateItemDialog.setTotal(total);
        updateItemDialog.setEmployeeID(employeeID);
        
        // Hiển thị dialog cập nhật
        updateItemDialog.setDataChangedListener(this);
        updateItemDialog.setVisible(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInfoActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableInvoices.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một hóa đơn để xem chi tiết.");
            return;
        }

        String invoiceID = (String) tableInvoices.getValueAt(selectedRow, 0);
        java.util.Date dateCreate = (java.util.Date) tableInvoices.getValueAt(selectedRow, 1);
        String methodPayment = (String) tableInvoices.getValueAt(selectedRow, 2);
        int total = (Integer) tableInvoices.getValueAt(selectedRow, 3);
        String employeeID = (String) tableInvoices.getValueAt(selectedRow, 4);

        Form_Invoice_DetailInfo detailInfoDialog = new Form_Invoice_DetailInfo((java.awt.Frame) SwingUtilities.getWindowAncestor(this), true);
        detailInfoDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        detailInfoDialog.setLocationRelativeTo(this);

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String formattedDate = (dateCreate != null) ? dateFormat.format(dateCreate) : "";

        detailInfoDialog.setInvoiceID(invoiceID);
        detailInfoDialog.setDateCreate(new SimpleDateFormat("yyyy-MM-dd").format(dateCreate));
        detailInfoDialog.setMethodPayment(methodPayment);
        detailInfoDialog.setTotal(total);
        detailInfoDialog.setEmployeeID(employeeID);

        // Hiển thị dialog
        detailInfoDialog.setVisible(true);
    }//GEN-LAST:event_btnInfoActionPerformed

    private void btnExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcelActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Chọn nơi lưu file Excel");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File saveFile = fileChooser.getSelectedFile();

                if (!saveFile.getName().toLowerCase().endsWith(".xlsx")) {
                    saveFile = new File(saveFile.toString() + ".xlsx");
                }

                Workbook workbook = new XSSFWorkbook();
                Sheet sheet = workbook.createSheet("HoaDon");

                Row headerRow = sheet.createRow(0);
                int columnCount = tableInvoices.getColumnCount();

                for (int i = 0; i < columnCount; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(tableInvoices.getColumnName(i));
                }

                int rowCount = tableInvoices.getRowCount();
                for (int j = 0; j < rowCount; j++) {
                    Row row = sheet.createRow(j + 1);

                    for (int k = 0; k < columnCount; k++) {
                        Cell cell = row.createCell(k);
                        Object value = tableInvoices.getValueAt(j, k);

                        if (value != null) {
                            if (value instanceof Number) {
                                if (value instanceof Integer || value instanceof Long || value instanceof Double || value instanceof Float) {
                                    cell.setCellValue(((Number) value).doubleValue());
                                } else {
                                    cell.setCellValue(value.toString());
                                }
                            } else if (value instanceof java.util.Date) {
                                cell.setCellValue((java.util.Date) value);
                                CellStyle dateCellStyle = workbook.createCellStyle();
                                CreationHelper createHelper = workbook.getCreationHelper();
                                dateCellStyle.setDataFormat(createHelper.createDataFormat().getFormat("yyyy-MM-dd")); // Định dạng tùy chỉnh
                                cell.setCellStyle(dateCellStyle);

                            } else {
                                cell.setCellValue(value.toString());
                            }
                        }
                    }
                }

                try (FileOutputStream fileOut = new FileOutputStream(saveFile)) {
                    workbook.write(fileOut);
                }
                workbook.close();

                JOptionPane.showMessageDialog(this, "Xuất file Excel thành công!\nĐường dẫn: " + saveFile.getAbsolutePath(), "Thành công", JOptionPane.INFORMATION_MESSAGE);
                openFile(saveFile.getAbsolutePath());

            } else if (userSelection == JFileChooser.CANCEL_OPTION) {
                JOptionPane.showMessageDialog(this, "Hủy bỏ xuất file Excel.", "Hủy bỏ", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xuất file Excel: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnExcelActionPerformed

    private void openFile(String path) {
        try {
          if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();
            File fileToOpen = new File(path);
            desktop.open(fileToOpen);
          } else {
            JOptionPane.showMessageDialog(this, "Máy tính của bạn không hỗ trợ mở file tự động.", "Lỗi", JOptionPane.ERROR_MESSAGE);
          }
        } catch (IOException ex) {
          JOptionPane.showMessageDialog(this, "Lỗi khi mở file: " + ex.getMessage(), "Lỗi", JOptionPane.ERROR_MESSAGE);
          ex.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExcel;
    private javax.swing.JButton btnInfo;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JPanel panelFunction;
    private javax.swing.JTable tableInvoices;
    // End of variables declaration//GEN-END:variables
}
